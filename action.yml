name: Setup TeX Live
author: Paolo Brasolin <paolo.brasolin@gmail.com>
description: GHA action to setup TeX Live
branding:
  icon: book-open
  color: blue
inputs:
  profile-path:
    description: File path of a tlmgr profile. The default is a `scheme-infraonly` with no documentation or source files. You use it as a starting point, see https://github.com/paolobrasolin/setup-texlive-action/blob/main/texlive.profile
    required: false
    default: ${{ github.action_path }}${{ runner.os == 'Windows' && '\' || '/'}}texlive.profile 
  packages-path:
    description: File path of a package list (plain text, one per line). The default is an empty file.
    required: false
    default: ${{ github.action_path }}${{ runner.os == 'Windows' && '\' || '/'}}texlive.packages 
  cache-key:
    description: The unique key to use for cache storage and retrieval. The default is `texlive`.
    required: false
    default: 'texlive'
  cache-enabled:
    description: Option to disable caching. Default is `false`.
    required: false
    default: true
  installation-path:
    description: Path where TeX Live will be installed. The default `texlive`, inside the runner's tool cache path.
    required: false
    default: ${{ runner.tool_cache }}${{ runner.os == 'Windows' && '\' || '/'}}texlive
outputs: {}
runs:
  using: "composite"
  steps:

    - name: Download TeX Live distribution and create hash (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        ## Check into temporary folder
        Set-Location -Path ${{ runner.temp }}
        ## Download installer
        Invoke-WebRequest http://mirror.ctan.org/systems/texlive/tlnet/install-tl.zip -OutFile install-tl.zip
        ## Generate hash and save it
        $fileHash = (Get-FileHash install-tl.zip).Hash
        $envString = "texlive_install_hash=" + $fileHash
        echo $envString | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Download TeX Live distribution and create hash (Linux or macOS)
      if: runner.os != 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Install TeX Live distribution (Linux or macOS)
        ## Check into temporary folder
        cd ${{ runner.temp }}
        ## Download installer
        wget --quiet http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        ## Generate hash and save it
        echo "texlive_install_hash=$(shasum -a 256 install-tl-unx.tar.gz | cut -f 1 -d " ")" >> $GITHUB_ENV

    - name: Cache TeX Live installation
      uses: actions/cache@v3
      id: cache-texlive
      if: inputs.cache-enabled == 'true'
      with:
        path: ${{ inputs.installation-path }}
        key: ${{ inputs.cache-key }}-${{ env.texlive_install_hash }}-${{ hashFiles(inputs.profile-path, inputs.packages-path) }}
        restore-keys: ${{ inputs.cache-key }}-

    - name: Install TeX Live distribution (Windows)
      if: runner.os == 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
      env:
        TEXLIVE_INSTALL_PREFIX: ${{ inputs.installation-path }}
        TEXLIVE_PROFILE_PATH: ${{ inputs.profile-path }}
      shell: powershell
      run: |
        # Install TeX Live distribution (Windows)
        ## Check into temporary folder
        Set-Location -Path ${{ runner.temp }}
        ## Unpack installer
        Expand-Archive -Path install-tl.zip -DestinationPath .
        ## Check into unpacked installer folder
        Set-Location -Path install-tl-20*
        ## Run installer with given profile
        .\install-tl-windows.bat --portable --profile="${env:TEXLIVE_PROFILE_PATH}"
    - name: Install TeX Live distribution (Linux or macOS)
      if: runner.os != 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
      env:
        TEXLIVE_INSTALL_PREFIX: ${{ inputs.installation-path }}
        TEXLIVE_PROFILE_PATH: ${{ inputs.profile-path }}
      shell: bash
      run: |
        # Install TeX Live distribution (Linux or macOS)
        ## Check into temporary folder
        cd ${{ runner.temp }}
        ## Unpack installer
        tar -xzf install-tl-unx.tar.gz
        ## Check into unpacked installer folder
        cd install-tl-20*
        ## Run installer with given profile
        ./install-tl --portable --profile="$TEXLIVE_PROFILE_PATH"

    - name: Update system paths (Windows)
      if: runner.os == 'Windows'
      env:
        TEXLIVE_INSTALL_PREFIX: ${{ inputs.installation-path }}
      shell: powershell
      run: |
        # Update system paths (Windows)
        ## Get tlmgr path
        $TLMGR_PATH = Get-ChildItem -Path "${env:TEXLIVE_INSTALL_PREFIX}\bin\*\tlmgr.bat"
        ## Get platform of installed distribution
        $PLATFORM = Invoke-Expression "$TLMGR_PATH -print-platform"
        ## Build binaries path
        $BINARIES_PATH = "${env:TEXLIVE_INSTALL_PREFIX}\bin\${PLATFORM}"
        ## Append binaries path to system paths
        Write-Output "${BINARIES_PATH}" | Out-File -FilePath ${env:GITHUB_PATH} -Encoding utf8 -Append
    - name: Update system paths (Linux or macOS)
      if: runner.os != 'Windows'
      env:
        TEXLIVE_INSTALL_PREFIX: ${{ inputs.installation-path }}
      shell: bash
      run: |
        # Update system paths (Linux or macOS)
        ## Get tlmgr path
        TLMGR_PATH=$(ls "$TEXLIVE_INSTALL_PREFIX"/bin/*/tlmgr)
        ## Get platform of installed distribution
        PLATFORM=$($TLMGR_PATH -print-platform)
        ## Build binaries path
        BINARIES_PATH="$TEXLIVE_INSTALL_PREFIX/bin/$PLATFORM"
        ## Append binaries path to system paths
        echo "$BINARIES_PATH" >> $GITHUB_PATH

    - name: Install TeX Live packages (Windows)
      if: runner.os == 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
      env:
        TEXLIVE_PACKAGES_PATH: ${{ inputs.packages-path }}
      shell: powershell
      run: |
        # Install TeX Live packages (Windows)
        ## Read nonempty lines from packages file into an array
        [array] $TEXLIVE_PACKAGES = (Select-String -Pattern '^(\s*#.*)?$' -NotMatch ${env:TEXLIVE_PACKAGES_PATH}).Line
        ## Use tlmgr to install the packages
        tlmgr install $($TEXLIVE_PACKAGES -join " ")
    - name: Install TeX Live packages (Linux or macOS)
      if: runner.os != 'Windows' && steps.cache-texlive.outputs.cache-hit != 'true'
      env:
        TEXLIVE_PACKAGES_PATH: ${{ inputs.packages-path }}
      shell: bash
      run: |
        # Install TeX Live packages (Linux or macOS)
        ## Read nonempty lines from packages file into an array
        while IFS=\= read pkg; do TEXLIVE_PACKAGES+=($pkg); done < <(grep --invert-match --extended-regexp '^(\s*#.*)?$' "$TEXLIVE_PACKAGES_PATH")
        ## Use tlmgr to install the packages
        tlmgr install "${TEXLIVE_PACKAGES[@]}"

    - name: Update TeX Live distribution (Windows)
      if: runner.os == 'Windows' && steps.cache-texlive.outputs.cache-hit == 'true'
      shell: powershell
      run: |
        # Update TeX Live distribution (Windows)
        ## Update tlmgr
        tlmgr update --self
        ## Update everything else
        tlmgr update --all
    - name: Update TeX Live distribution (Linux and macOS)
      if: runner.os != 'Windows' && steps.cache-texlive.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Update TeX Live distribution (Linux and macOS)
        ## Update tlmgr
        tlmgr update --self
        ## Update everything else
        tlmgr update --all
